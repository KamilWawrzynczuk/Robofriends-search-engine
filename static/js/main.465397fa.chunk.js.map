{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","group","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundry","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","inherits","createClass","value","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","apply","arguments","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.465397fa.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className=' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt={`Robot ${id}`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    console.log('CardList');\n    return (\n        <div>\n            {\n            robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                );\n            })   \n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    console.group('SaearchBox');\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--grean bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>     \n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        } \n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Ooops. That is not good.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\n\nclass CounterButton extends Component {\n \n    constructor() {\n       super();\n       this.state = {  \n           count: 0\n       }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.state.count !== nextState.count) {\n            return true;\n        }\n        return false;\n    }\n    updateCount = () => {\n        this.setState(state => {\n            return {count: state.count + 1}\n        })\n    }\n\n    render() {\n        console.log('CounterButton');\n       return (\n        <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n       );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     return false;\n    // }\n\n    render() {\n        console.log('Header');\n       return (\n           <div>\n               <h1 className='f1'>RoboFriends</h1>\n               <CounterButton color={'red'}/>\n           </div>    \n       );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport { setSearchField, requestRobots } from '../actions';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    } \n}\n\nclass App extends Component {\n    \n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        return isPending ?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange = {onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div> \n            );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD: \n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action= {}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true})\n        case REQUEST_ROBOTS_SUCCESS: \n            return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false})\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger(); \n\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store} >  \n        <App />\n    </Provider>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}